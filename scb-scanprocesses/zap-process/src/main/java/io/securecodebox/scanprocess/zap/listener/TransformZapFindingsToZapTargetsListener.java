/*
 *
 *  SecureCodeBox (SCB)
 *  Copyright 2015-2018 iteratec GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * /
 */
package io.securecodebox.scanprocess.zap.listener;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.securecodebox.constants.DefaultFields;
import io.securecodebox.model.execution.ScanProcessExecution;
import io.securecodebox.model.execution.ScanProcessExecutionFactory;
import io.securecodebox.model.execution.Target;
import io.securecodebox.model.findings.Finding;
import io.securecodebox.scanprocess.listener.TransformFindingsToTargetsListener;
import org.camunda.bpm.engine.delegate.DelegateExecution;
import org.camunda.bpm.engine.delegate.ExecutionListener;
import org.camunda.bpm.engine.variable.Variables;
import org.camunda.bpm.engine.variable.value.ObjectValue;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class TransformZapFindingsToZapTargetsListener implements ExecutionListener {

    protected static final org.slf4j.Logger LOG = LoggerFactory.getLogger(TransformFindingsToTargetsListener.class);

    @Autowired
    ScanProcessExecutionFactory processExecutionFactory;

    @Override
    public void notify(DelegateExecution execution) throws Exception {
        ScanProcessExecution scanProcess = processExecutionFactory.get(execution);

        List<Target> targets = scanProcess.getTargets();
        List<Finding> findings = scanProcess.getFindings();

        transform(targets, findings);

        ObjectMapper objectMapper = new ObjectMapper();

        ObjectValue objectValue = Variables.objectValue(objectMapper.writeValueAsString(targets))
                .serializationDataFormat(Variables.SerializationDataFormats.JSON)
                .create();
        execution.setVariable(DefaultFields.PROCESS_TARGETS.name(), objectValue);
    }

    /**
     * Embeds the URLs of the findings into the SITEMAP Attribute of the corresponding Target
     *
     * @param targets  preexisting zap targets
     * @param findings findings generated by the zap spider
     */
    void transform(List<Target> targets, List<Finding> findings) {
        for (Target target : targets) {
            List<Map<String, Object>> targetSitemap = findings.stream()
                    .filter(finding -> (finding.getAttributes().get("ZAP_BASE_URL")).equals(
                            target.getAttributes().get("ZAP_BASE_URL")))
                    .map(Finding::getAttributes)
                    .collect(Collectors.toList());

            target.getAttributes().put("ZAP_SITEMAP", targetSitemap);
        }
    }
}
